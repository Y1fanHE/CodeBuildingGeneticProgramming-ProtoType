Gen		Median		MAD		Best		Div		Run Best		Code
1		3958.0		1417		0.097		1417		input3
2		3005.0		1417		0.076		1417		input3
3		3005.0		1417		0.107		1417		input3
4		3005.0		1386		0.113		1386		max_(input3, print_tap(min_(10, println_tap(println_tap(min_(2, input1))))))
5		3005.0		1121		0.147		1121		max_(input3, print_tap(min_(10, input2)))
6		3105.0		684		0.187		684		max_(input3, print_tap(min_(add(10, input2), input1)))
7		2951.0		532		0.188		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
8		3005.0		532		0.174		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
9		2726.0		532		0.174		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
10		2884.5		532		0.194		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
11		3005.0		532		0.18		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
12		2853.5		532		0.194		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
13		3005.0		532		0.225		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
14		2953.0		532		0.223		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
15		2713.0		532		0.207		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
16		2661.0		532		0.218		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
17		2378.0		532		0.215		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
18		2874.5		532		0.226		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
19		2840.0		532		0.215		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
20		2321.0		532		0.224		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
21		2455.5		532		0.223		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
22		2505.0		532		0.223		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
23		2321.0		532		0.222		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
24		2513.0		532		0.236		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
25		2679.5		532		0.245		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
26		2486.0		532		0.214		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
27		2550.5		532		0.225		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
28		2732.0		532		0.24		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
29		2796.5		532		0.236		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
30		2872.0		532		0.211		532		max_(input3, print_tap(min_(input2, println_tap(println_tap(max_(min_(input1, 2), input1))))))
31		2848.0		493		0.23		493		min_(max_(input3, min_(input1, input2)), abs_(println_tap(input1)))
32		3005.0		493		0.22		493		min_(max_(input3, min_(input1, input2)), abs_(println_tap(input1)))
33		2869.0		493		0.232		493		min_(max_(input3, min_(input1, input2)), abs_(println_tap(input1)))
34		3005.0		493		0.258		493		min_(max_(input3, min_(input1, input2)), abs_(println_tap(input1)))
35		2703.0		0		0.264		0		max_(min_(print_tap(input3), input2), println_tap(min_(input1, max_(println_tap(input2), print_tap(input3)))))
Solution found.
def median(input1, input2, input3):
    return max_(min_(print_tap(input3), input2), println_tap(min_(input1, max_(println_tap(input2), print_tap(input3)))))

Simplifying genome of length 38.
Simplified genome: length=38 error=0
def median(input1, input2, input3):
    return max_(min_(print_tap(input3), input2), println_tap(min_(input1, max_(println_tap(input2), print_tap(input3)))))

[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0]
Final Test Error: 0
