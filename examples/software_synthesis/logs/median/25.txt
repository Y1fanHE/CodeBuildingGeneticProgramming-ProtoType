Gen		Median		MAD		Best		Div		Run Best		Code
1		4250.0		2434		0.102		2434		float2int(input3)
2		2511.0		2434		0.072		2434		float2int(input3)
3		2511.0		2434		0.094		2434		float2int(input3)
4		2530.0		2236		0.098		2236		min_(input2, println_tap(println_tap(input1)))
5		2530.0		2109		0.113		2109		min_(max_(input1, 2), input2)
6		2530.0		1240		0.142		1240		max_(min_(input2, input3), println_tap(input1))
7		2503.0		916		0.129		916		max_(print_tap(min_(input1, input2)), input3)
8		2464.0		916		0.127		916		max_(print_tap(min_(input1, input2)), input3)
9		2421.5		916		0.124		916		max_(print_tap(min_(input1, input2)), input3)
10		2415.0		916		0.123		916		max_(print_tap(min_(input1, input2)), input3)
11		2386.0		916		0.121		916		max_(print_tap(min_(input1, input2)), input3)
12		2236.0		916		0.133		916		max_(print_tap(min_(input1, input2)), input3)
13		2236.0		916		0.154		916		max_(print_tap(min_(input1, input2)), input3)
14		2236.0		916		0.161		916		max_(print_tap(min_(input1, input2)), input3)
15		2215.5		916		0.152		916		max_(print_tap(min_(input1, input2)), input3)
16		2223.0		916		0.157		916		max_(print_tap(min_(input1, input2)), input3)
17		2156.0		916		0.162		916		max_(print_tap(min_(input1, input2)), input3)
18		2109.0		916		0.154		916		max_(print_tap(min_(input1, input2)), input3)
19		2221.0		916		0.174		916		max_(print_tap(min_(input1, input2)), input3)
20		2236.0		916		0.156		916		max_(print_tap(min_(input1, input2)), input3)
21		2156.0		911		0.169		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
22		2156.0		911		0.152		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
23		2156.0		911		0.177		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
24		2156.0		911		0.163		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
25		2117.0		911		0.161		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
26		2230.0		911		0.187		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
27		2156.0		911		0.177		911		max_(min_(input2, max_(input3, input1)), sub(input3, 1))
28		2156.0		850		0.202		850		max_(min_(input2, float2int(max_(input3, input1))), min_(sub(input3, 1), 63))
29		2156.0		850		0.192		850		max_(min_(input2, float2int(max_(input3, input1))), min_(sub(input3, 1), 63))
30		2156.0		850		0.212		850		max_(min_(input2, float2int(max_(input3, input1))), min_(sub(input3, 1), 63))
31		2415.0		850		0.235		850		max_(min_(input2, float2int(max_(input3, input1))), min_(sub(input3, 1), 63))
32		2403.5		846		0.254		846		max_(min_(input2, float2int(max_(input3, input1))), add(-1, min_(input3, 63)))
33		2236.0		0		0.248		0		min_(max_(input2, input1), max_(input3, min_(input2, float2int(input1))))
Solution found.
def median(input1, input2, input3):
    return min_(max_(input2, input1), max_(input3, min_(input2, float2int(input1))))

Simplifying genome of length 34.
Simplified genome: length=34 error=0
def median(input1, input2, input3):
    return min_(max_(input2, input1), max_(input3, min_(input2, float2int(input1))))

[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0]
Final Test Error: 0
